openapi: 3.0.0
info:
  version: '0.1'
  title: SensorThings Tester
  description: Example SensorThings requests for SCIRA OpenSensorHub node.
servers:
  - url: 'https://scira.georobotix.io:8282/sensorhub/sta/v1.0'
    description: Demo server
  - url: 'https://localhost:8282/sensorhub/sta/v1.0'
    description: Local testing server
tags:
  - name: Things
    description: Operations for interacting with Thing entities
      
      
paths:
  /Things:
    get:
      summary: List or search for Things
      operationId: listThings
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/select'
      responses:
        '200':
          description: A paged array of Thing resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thing'
    post:
      security:
        - basicAuth: []
      summary: Create a new Thing
      operationId: createThing
      tags:
        - Things
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thing'
      responses:
        '201':
          $ref: '#/components/responses/201'
  '/Things({thingId})':
    get:
      summary: Get info about a specific Thing
      operationId: getThing
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingId'
        - $ref: '#/components/parameters/select'
      responses:
        '200':
          description: OK. Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
    put:
      summary: Update a specific Thing
      operationId: updateThing
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thing'
      responses:
        '204':
          $ref: '#/components/responses/204'
    delete:
      summary: Delete a specific Thing
      operationId: deleteThing
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingId'
      responses:
        '204':
          $ref: '#/components/responses/204'
          

  /Sensors:
    get:
      summary: List or search for Sensors
      operationId: listSensors
      tags:
        - Sensors
      parameters:
        - $ref: '#/components/parameters/select'
      responses:
        '200':
          description: A paged array of Sensor resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
    post:
      security:
        - basicAuth: []
      summary: Create a new Sensor
      operationId: createSensor
      tags:
        - Sensors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sensor'
      responses:
        '201':
          $ref: '#/components/responses/201'
  '/Sensors({sensorId})':
    get:
      summary: Get info about a specific Sensor
      operationId: getSensor
      tags:
        - Sensors
      parameters:
        - $ref: '#/components/parameters/sensorId'
        - $ref: '#/components/parameters/select'
      responses:
        '200':
          description: OK. Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'      
          
          
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    BaseResourceInfo:
      description: Common information shared by all resource types
      type: object
      required:
        - name
      properties:
        id:
          description: Resource identifier
          type: string
          example: 'auto-generated by server on POST'
        name:
          description: Human readable resource name
          type: string
        description:
          description: Human readable description of resource
          type: string
    Thing:
      description: Thing Entity
      allOf:
        - $ref: '#/components/schemas/BaseResourceInfo'
        - type: object
          properties:
            properties:
              description: Custom properties
              type: object
      example:
        name: 'Air Quality Monitoring System'
        description: 'Sensor system monitoring area temperature'
        properties:
          'Deployment Condition': 'Deployed in a third floor balcony'
          'Case Used': 'Radiation shield'
    Sensor:
      description: Sensor Entity
      allOf:
        - $ref: '#/components/schemas/BaseResourceInfo'
        - type: object
          properties:
            encodingType:
              description: MIME type of linked document
              type: string
              example: 'application/pdf'
            metadata:
              description: URL of sensor description
              type: string
              example: 'http://mydomain.net/mydoc'
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    DateTime:
      description: ISO 8601 time stamp
      type: string
      pattern: >-
        ^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z)?$
  parameters:
    thingId:
      name: thingId
      in: path
      description: The unique numerical ID of a Thing resource
      required: true
      schema:
        type: string
    sensorId:
      name: sensorId
      in: path
      description: The unique numerical ID of a Sensor resource
      required: true
      schema:
        type: string
    locationId:
      name: locationId
      in: path
      description: The unique numerical ID of a Location resource
      required: true
      schema:
        type: string
    select:
      name: $select
      in: query
      description: Comma separated list of properties to include in results
      required: false
      schema:
        type: array
        items:
          type: string
  responses:
    '201':
      description: Success - New resource created
      headers:
        Location:
          schema:
            type: string
          description: URI of newly created resource
    '204':
      description: Success - Resource updated
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: No authentication information was provided
    '403':
      description: The user doesn't have the necessary permissions to access the resource
    '404':
      description: No resource was found with specified URL
    5XX:
      description: 'Unexpected server error. Only retry on 502, 503'
