apply from: 'common.gradle'
apply from: 'release.gradle'

description = 'OSH Core Modules'


allprojects  {
  version = oshCoreVersion
}


// dependencies for inclusion in distribution
dependencies {
  project.subprojects.each {
    p -> compile p
  }
}

distributions {
  main {
    baseName = 'osh-core'
    contents {
      into('lib') {
        from project.configurations.compileClasspath
      } 
    }
  }
}


// task to generate aggregated javadocs
Set<Project> javadocProjects = [':swe-common-core', ':sensorml-core', ':sensorhub-core']
task alljavadoc(type: Javadoc) {
  dependsOn build
  source javadocProjects.collect {name -> project(name).sourceSets.main.allJava}
  classpath = files(javadocProjects.collect {name -> project(name).sourceSets.main.compileClasspath})
  include 'org/sensorhub/api/**', 'net/opengis/**'
  destinationDir = file("${buildDir}/docs/javadoc")
}


// task to publish javadocs to GitHub pages (osh-docs)
task releaseJavadoc {
  doLast {
    println '> Copying Javadoc to GitHub Pages'
    
    def ghPagesDir = "$rootDir/../osh-docs/site/"
    if (!new File(ghPagesDir).exists())
      throw new GradleException('osh-docs github pages repo was not found locally')
      
    // copy apidocs to osh-docs site repo
    def javaDocRepoDir = "apidocs/v" + version
    def javadocDir = ghPagesDir + javaDocRepoDir
    mkdir javadocDir
    copy {
      into javadocDir
      from ("${buildDir}/docs/javadoc") {
        include '**/*'
      }
    }   
  }
}

releaseJavadoc.dependsOn alljavadoc
release.dependsOn releaseJavadoc
